name: CI/CD

on:
  push:
    branches: [ main ]

  workflow_dispatch:
    inputs:
      frontend_updated:
        description: 'Triggered by Frontend Update'
        required: false
        default: 'false'  

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      
      - name: Log Trigger Info
        if: ${{ github.event.inputs.frontend_updated == 'true' }}
        run: echo "This workflow was triggered by the frontend workflow."

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2  
     
      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY: hyun.lee/community-be
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building and pushing BE image: $IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Get Frontend SHA from S3
        env: 
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET: hyun.lee.bucket
        run: |
          echo "downloading frontend-latest.txt from S3..."
          aws s3 cp s3://$S3_BUCKET/frontend-latest.txt frontend-latest.txt --region $AWS_REGION
          
          FRONTEND_SHA=$(cat frontend-latest.txt)
          echo "Frontend SHA from S3: $FRONTEND_SHA"
          echo "FRONTEND_SHA=$FRONTEND_SHA" >> $GITHUB_ENV
      

      - name: Generate Dockerrun.aws.json
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          BACKEND_IMAGE_TAG: ${{ github.sha }}
        run: |
      
          FRONTEND_SHA="${{ env.FRONTEND_SHA }}"

          echo "Frontend image will use tag: $FRONTEND_SHA"
          echo "Backend image will use tag: $BACKEND_IMAGE_TAG"

          cat <<EOF > Dockerrun.aws.json
          {
            "AWSEBDockerrunVersion": 2,
            "containerDefinitions": [
              {
                "name": "frontend",
                "image": "${ECR_REGISTRY}/hyun.lee/community-re:${FRONTEND_SHA}",
                "essential": true,
                "memory": 512,
                "portMappings": [
                  {
                    "hostPort": 8001,
                    "containerPort": 8001
                  }
                ]
              },
              {
                "name": "backend",
                "image": "${ECR_REGISTRY}/hyun.lee/community-be:${BACKEND_IMAGE_TAG}",
                "essential": true,
                "memory": 256,
                "portMappings": [
                  {
                    "hostPort": 3001,
                    "containerPort": 3001
                  }
                ]
              },
              {
                "name": "nginx",
                "image": "nginx:latest",
                "essential": true,
                "memory": 128,
                "portMappings": [
                  {
                    "hostPort": 80,
                    "containerPort": 80
                  }
                ],
                "mountPoints": [
                  {
                    "sourceVolume": "nginx",
                    "containerPath": "/etc/nginx/nginx.conf"
                  }
                ]
              }
            ],
            "volumes": [
              {
                "name": "nginx",
                "host": {
                  "sourcePath": "/var/app/current/nginx/nginx.conf"
                }
              }
            ]
          }
          EOF

      - name: Deploy to Elastic Beanstalk
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET: hyun.lee.bucket
          APPLICATION_NAME: ${{ secrets.EB_APP_NAME }}
          ENVIRONMENT_NAME: ${{ secrets.EB_ENV_NAME }}
        run: |
          VERSION_LABEL="$(git rev-parse HEAD)-$(date +%s)"
          echo "Zipping Dockerrun.aws.json..."
          zip -r deploy.zip Dockerrun.aws.json nginx/

          echo "Uploading to S3..."
          aws s3 cp deploy.zip s3://$S3_BUCKET/$VERSION_LABEL-deploy.zip --region $AWS_REGION

          echo "Creating new EB application version..."
          aws elasticbeanstalk create-application-version \
            --application-name "$APPLICATION_NAME" \
            --version-label "$VERSION_LABEL" \
            --source-bundle S3Bucket="$S3_BUCKET",S3Key="$VERSION_LABEL-deploy.zip" \
            --auto-create-application \
            --region "$AWS_REGION"

          echo "Updating EB environment..."
          aws elasticbeanstalk update-environment \
            --environment-name "$ENVIRONMENT_NAME" \
            --version-label "$VERSION_LABEL" \
            --region "$AWS_REGION"